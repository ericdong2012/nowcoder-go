1. 异或  temp = temp ^ nums[i]  找到只出现一次的数字
2. 2的幂
        # method1: 迭代，如果有结果不是0， 不是2的幂

        # method2: 判断最右边的1
        if n == 0:
            return False
        # n; 8     0 1000
        # -n: -8   1 1000    (1 0111 + 1)

        # 7 & -7
        # 0000 0111
        # 1111 1001 (00000111这个结果是7的结果，然后各位取反 11111000 末尾加1 11111001这个就是-7的二进制数了)
        # 0000 0111
        return n & (-n) == n

        # method3: 去除最右边的1(消除最后1位后 为0)
        # https://leetcode-cn.com/problems/power-of-two/solution/power-of-two-er-jin-zhi-ji-jian-by-jyd/
        # if n == 0 :
        #     return False

        # 8      01000
        # 7      00111
        # 8 & 7  00000

        # 7      111
        # 6      110
        # 7 & 6  110 不等与0
        # return n & (n -1 ) == 0

3. 	先异或，得到所有不同位 （r = m^n ）
   	temp := m ^ n

4. 消除最后一位
    temp &= (temp - 1)
